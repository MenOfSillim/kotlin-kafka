name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      ## ================= docker part =================
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: teichae/node
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build and Dockerhub Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: menofdocker/kotlin-kafka:latest
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max

      - name: Connect MenOfSillim
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_SSH_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            echo "Remove Container ID"
            if [ $(docker ps -af "name=kotlin-kafka" -q | awk '{print length}') -gt 1 ]
            then
              echo "Container Exist"
              docker rm -f $(docker ps -af "name=kotlin-kafka" -q)
            else
              echo "Container No Exist"
            fi
            
            echo "Remove Image ID"
            if [ $(docker images -f "reference=${{ secrets.DOCKERHUB_USERNAME }}/kotlin-kafka" -q) | awk '{print length}' -gt 1 ]
            then
              echo "Image Exist"
              docker rmi -f menofdocker/kotlin-kafka:latest
            else
              echo "Image No Exist"
            fi
            
            echo "Pull Docker Image"
            docker pull menofdocker/kotlin-kafka:latest
            
            echo "Run Docker Image"
            docker run -d --name kotlin-kafka \
                       -p 30010:20010 \
                       --add-host=host.docker.internal:host-gateway \
                       --restart unless-stopped menofdocker/kotlin-kafka:latest
